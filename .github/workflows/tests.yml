name: Tests

on:
  - push
##  - pull_request
#
jobs:
#  test:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ ubuntu-latest ]
#        python-version: ['3.11']
##        os: [ubuntu-latest, windows-latest]
##        python-version: ['3.7', '3.8', '3.9']
#
#    steps:
#    - uses: actions/checkout@v2
#      name: Set up Python ${{ matrix.python-version }}
#    - uses: actions/setup-python@v2
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install tox tox-gh-actions
#    - name: Test with Tox
#      run: tox
  Linting:
    runs-on: ubuntu-latest
    steps:
      # check-out repo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      # install poetry
      - name: Install poetry
        run: pipx install poetry==1.4
      # set-up python with cache
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      # install requirements (including dev dependencies)
      - name: Install requirements
        run: poetry install --with lint
      # update mypy
      - name: Update mypy
        run: poetry update mypy
      # run linters
      - name: Run linters
        run: |
          set -o pipefail
          poetry run make lint

  Testing:
    runs-on: ubuntu-latest
    steps:
      # check-out repo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      # install poetry
      - name: Install poetry
        run: pipx install poetry==1.4
      # set-up python with cache
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      # set-up pytorch with cache
      - name: Setup Pytorch with pip
        run: pip3 install torch --index-url https://download.pytorch.org/whl/cu118
      # install requirements (including dev dependencies)
      - name: Install requirements
        run: poetry install --with test
      # run unit tests
      - name: Run unit-tests
        run: |
          set -o pipefail
          poetry run make unit-tests-cov-fail
      # add pytest coverage report to PR
      - name: Pytest coverage comment
        if: ${{ success() && github.event_name == 'pull_request' }}
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          title: Coverage Report
          pytest-coverage-path: pytest-coverage.txt
          junitxml-path: pytest.xml
      # add content to GitHub summary
      - name: Pytest coverage GitHub summary
        if: ${{ success() && github.event_name == 'pull_request' }}
        run: |
          set -o pipefail
          echo '# Coverage report' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat pytest-coverage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '\n\n\n'
          echo '${{ steps.coverageComment.outputs.coverageHtml }}' >> $GITHUB_STEP_SUMMARY
